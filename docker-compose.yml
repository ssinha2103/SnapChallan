version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: snapchallan_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-snapchallan}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./infra/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - snapchallan_network

  # Redis Cache & Queue
  redis:
    image: redis:7.2-alpine
    container_name: snapchallan_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - snapchallan_network

  # Django Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: snapchallan_backend
    restart: unless-stopped
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - MONGO_URI=mongodb://admin:${MONGO_ROOT_PASSWORD:-admin123}@mongodb:27017/snapchallan?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
    depends_on:
      - mongodb
      - redis
    networks:
      - snapchallan_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: snapchallan_celery_worker
    restart: unless-stopped
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - MONGO_URI=mongodb://admin:${MONGO_ROOT_PASSWORD:-admin123}@mongodb:27017/snapchallan?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      - mongodb
      - redis
    networks:
      - snapchallan_network
    command: celery -A snapchallan worker -l info

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: snapchallan_celery_beat
    restart: unless-stopped
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - MONGO_URI=mongodb://admin:${MONGO_ROOT_PASSWORD:-admin123}@mongodb:27017/snapchallan?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - mongodb
      - redis
    networks:
      - snapchallan_network
    command: celery -A snapchallan beat -l info

  # AI Processing Service
  ai_service:
    build:
      context: ./ai
      dockerfile: Dockerfile
    container_name: snapchallan_ai
    restart: unless-stopped
    environment:
      - MODEL_PATH=/app/models/yolov8n.pt
      - CONFIDENCE_THRESHOLD=0.7
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    ports:
      - "8001:8000"
    volumes:
      - ./ai:/app
      - ai_models:/app/models
      - media_files:/app/media
    depends_on:
      - redis
    networks:
      - snapchallan_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: snapchallan_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./frontend:/var/www/html
      - static_files:/var/www/static
      - media_files:/var/www/media
      - ./infra/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - snapchallan_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: snapchallan_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - snapchallan_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: snapchallan_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - snapchallan_network

  # Loki Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: snapchallan_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./infra/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - snapchallan_network

  # Promtail Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: snapchallan_promtail
    restart: unless-stopped
    volumes:
      - ./infra/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - snapchallan_network

volumes:
  mongodb_data:
  redis_data:
  media_files:
  static_files:
  ai_models:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  snapchallan_network:
    driver: bridge
